#!/usr/bin/env python

import bdkd.datastore
import json, optparse, os, sys, urlparse

def main():
    usage = "usage: %prog [options] 'repository' 'resource name' file..."
    optparser = optparse.OptionParser(usage=usage)
    optparser.add_option('-m', '--meta', dest='metadata', 
            help='Meta-data for resource (JSON string)')
    optparser.add_option('-f', '--force', action='store_true',
            help='Force overwrite any existing resource')
    (options, args) = optparser.parse_args()
    
    if len(args) < 3:
        optparser.error("Need to provide a repository, resource name, and at least one file")

    # Repository
    repository_name = args.pop(0)
    repository = bdkd.datastore.repository(repository_name)
    if not repository:
        optparser.error("The repository '{0}' is not valid or not configured"
                .format(repository_name))
    
    # Resource name
    resource_name = args.pop(0)
    
    # Files/URLs
    filenames = args
    for filename in filenames:
        if not os.path.exists(filename):
            url = urlparse.urlparse(filename)
            if not url.netloc:
                optparser.error("The file '{0}' is neither a local filename nor a URL".format(filename))

    # Unpack metadata, check
    if options.metadata:
        try:
            metadata = json.loads(options.metadata)
        except ValueError as error:
            optparser.error("Could not parse metadata: '{0}'".format(error.message))
        if not isinstance(metadata, dict):
            optparser.error("The JSON meta-data must contain a dictionary")
    else:
        metadata = {}

    # Check if resource exists
    existing = repository.get(resource_name)
    if existing:
        if options.force:
            repository.delete(existing)
        else:
            optparser.error("Resource '{0}' already exists (use --force to overwrite)".format(resource_name))

    # Save resource
    resource = bdkd.datastore.Resource.new(resource_name, filenames, 
            **metadata)
    repository.save(resource)

if __name__ == "__main__":
    main()
